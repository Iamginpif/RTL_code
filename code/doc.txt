1. Register File (RegFile) - B·ªô thanh ghi
Ch·ª©c nƒÉng:
- L∆∞u tr·ªØ c√°c gi√° tr·ªã trung gian trong qu√° tr√¨nh th·ª±c thi l·ªánh.
- G·ªìm 32 thanh ghi x0 ‚Üí x31, m·ªói thanh ghi 32-bit.
- Thanh ghi x0 lu√¥n b·∫±ng 0.
- C√≥ hai c·ªïng ƒë·ªçc v√† m·ªôt c·ªïng ghi ƒë·ªÉ h·ªó tr·ª£ R-type instruction (RISC-V 3 to√°n h·∫°ng).

C·∫•u tr√∫c Verilog:
```verilog
module regfile (
    input  logic clk, we,  // clock & write enable
    input  logic [4:0] rs1, rs2, rd,  // 5-bit ƒë·ªãa ch·ªâ thanh ghi
    input  logic [31:0] wd,  // D·ªØ li·ªáu ghi v√†o rd
    output logic [31:0] rd1, rd2  // D·ªØ li·ªáu ƒë·ªçc t·ª´ rs1, rs2
);
    logic [31:0] regs [31:0];  // 32 thanh ghi 32-bit

    assign rd1 = (rs1 == 0) ? 32'b0 : regs[rs1];
    assign rd2 = (rs2 == 0) ? 32'b0 : regs[rs2];

    always_ff @(posedge clk) begin
        if (we && rd != 0)  // Kh√¥ng ghi v√†o x0
            regs[rd] <= wd;
    end
endmodule
```

---

2. Immediate Generator (ImmGen) - B·ªô t·∫°o h·∫±ng s·ªë t·ª©c th·ªùi
Ch·ª©c nƒÉng:
- Tr√≠ch xu·∫•t v√† m·ªü r·ªông gi√° tr·ªã t·ª©c th·ªùi (immediate) t·ª´ l·ªánh.
- C√°c lo·∫°i immediate:
  - I-type: 12-bit sign-extended.
  - S-type: Gh√©p imm[11:5] v√† imm[4:0].
  - B-type: Nh∆∞ S-type, nh∆∞ng c√≥ d·ªãch bit.
  - U-type: imm[31:12], g√°n 0 v√†o imm[11:0].
  - J-type: Gh√©p imm[20], imm[10:1], imm[11], imm[19:12].

C·∫•u tr√∫c Verilog:
```verilog
module immgen (
    input  logic [31:0] instr,  // L·ªánh 32-bit ƒë·∫ßu v√†o
    output logic [31:0] imm_out // Immediate m·ªü r·ªông
);
    logic [11:0] immI, immS, immB;
    logic [19:0] immU;
    logic [19:0] immJ;

    assign immI = instr[31:20];
    assign immS = {instr[31:25], instr[11:7]};
    assign immB = {instr[31], instr[7], instr[30:25], instr[11:8]};
    assign immU = instr[31:12];
    assign immJ = {instr[31], instr[19:12], instr[20], instr[30:21]};

    always_comb begin
        case (instr[6:0])
            7'b0010011, 7'b0000011, 7'b1100111: imm_out = {{20{immI[11]}}, immI};
            7'b0100011: imm_out = {{20{immS[11]}}, immS};
            7'b1100011: imm_out = {{19{immB[11]}}, immB, 1'b0};
            7'b0110111, 7'b0010111: imm_out = {immU, 12'b0};
            7'b1101111: imm_out = {{11{immJ[19]}}, immJ, 1'b0};
            default: imm_out = 32'b0;
        endcase
    end
endmodule
```

---

### 3. Instruction Memory (IMem) - B·ªô nh·ªõ l·ªánh
#### Ch·ª©c nƒÉng:
- L∆∞u tr·ªØ ch∆∞∆°ng tr√¨nh d∆∞·ªõi d·∫°ng m√£ m√°y 32-bit.
- Khi PC (Program Counter) g·ª≠i ƒë·ªãa ch·ªâ, IMem tr·∫£ v·ªÅ l·ªánh t∆∞∆°ng ·ª©ng.

#### C·∫•u tr√∫c Verilog:
```verilog
module imem (
    input  logic [31:0] addr,  // ƒê·ªãa ch·ªâ l·ªánh (PC)
    output logic [31:0] instr  // L·ªánh 32-bit
);
    logic [31:0] mem [0:255];  // 256 √¥ nh·ªõ ch·ª©a l·ªánh

    initial begin
        $readmemh("program.hex", mem);  // Load ch∆∞∆°ng tr√¨nh t·ª´ file
    end

    assign instr = mem[addr[9:2]];  // Chia 4 v√¨ ƒë·ªãa ch·ªâ byte, nh∆∞ng l·ªánh l√† 32-bit
endmodule
```

---

### 4. T·ªïng k·∫øt
| Th√†nh ph·∫ßn  | Ch·ª©c nƒÉng |
|------------|-----------|
| **RegFile** | L∆∞u 32 thanh ghi, ƒë·ªçc/ghi d·ªØ li·ªáu khi th·ª±c thi l·ªánh |
| **ImmGen**  | T·∫°o gi√° tr·ªã immediate t·ª´ l·ªánh, h·ªó tr·ª£ ALU v√† ƒë·ªãa ch·ªâ nh·∫£y |
| **IMem**    | Ch·ª©a m√£ m√°y, gi√∫p CPU l·∫•y l·ªánh t·ª´ b·ªô nh·ªõ |

üî• **RegFile, ImmGen, IMem l√† 3 th√†nh ph·∫ßn quan tr·ªçng gi√∫p RISC-V pipeline ho·∫°t ƒë·ªông hi·ªáu qu·∫£!** üöÄ


